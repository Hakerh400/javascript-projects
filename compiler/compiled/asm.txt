:init call

data:
  ivt: [1024]
  str: [1024]

init:
  0 enter

  :initIvt call
  :enableInts call
  :main call pop
  :shutDown call

  0 leavev

initIvt:
  0 enter
  :ivt popIvtp
  :mboard :ivt 0 add write
  :timer :ivt 4 add write
  :input :ivt 8 add write
  :output :ivt 12 add write
  0 0x03 out
  1 0x13 out
  2 0x23 out
  3 0x33 out
  0 leavev

enableInts:
  0 enter
  inte
  0 leavev

mboard:
  rti

timer:
  rti

input:
  rti

output:
  rti

shutDown:
  0 enter
  1 0 out
  halt
  0 leavev
main:
5:
  4
  enter
  5
  -4
  varSet
  -4
  :37
  call
  0
  0
  leave
37:
  16
  enter
  10
  -4
  varSet
  808464432
  -8
  varSet
  0
  -12
  varSet
  1
  -16
  varSet
  -12
  push
  0
  varSet
  pop
  79:
  -12
  4
  lt
  :80
  jz
  -16
  -16
  10
  push
  mul
  varSet
  pop
  97:
  -12
  -12
  1
  push
  add
  varSet
  pop
  :79
  jmp
  80:
  -12
  push
  0
  varSet
  pop
  -12
  -12
  1
  push
  add
  varSet
  pop
  8
  8
  -16
  push
  mod
  varSet
  pop
  -12
  push
  0
  varSet
  pop
  135:
  8
  :136
  jz
  -8
  -8
  8
  10
  mod
  3
  -12
  sub
  3
  shl
  shl
  push
  or
  varSet
  pop
  8
  8
  10
  push
  div
  varSet
  pop
  -12
  -12
  1
  push
  add
  varSet
  pop
  :135
  jmp
  136:
  pushEbp 8 sub 0x35 out
  5 0x34 out
  1 0x30 out
  printf1:
  dispatch
  0x31 in 1 and
  :printf1 jz
  0 0x30 out
  4
  leavev