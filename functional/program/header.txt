land: [a, b]{
  not(imp(a, not(b)));
};

lor: [a, b]{
  imp(not(a), b);
};

byte: [a, b, c, d, e, f, g, h]{
  [mode, i2, i1, i0]{
    ifret(land(not(i2), land(not(i1), not(i0))), []{ if(mode, []{ assign(h, not(h)); }, h); });
    ifret(land(not(i2), land(not(i1), i0)), []{ if(mode, []{ assign(g, not(g)); }, g); });
    ifret(land(not(i2), land(i1, not(i0))), []{ if(mode, []{ assign(f, not(f)); }, f); });
    ifret(land(not(i2), land(i1, i0)), []{ if(mode, []{ assign(e, not(e)); }, e); });
    ifret(land(i2, land(not(i1), not(i0))), []{ if(mode, []{ assign(d, not(d)); }, d); });
    ifret(land(i2, land(not(i1), i0)), []{ if(mode, []{ assign(c, not(c)); }, c); });
    ifret(land(i2, land(i1, not(i0))), []{ if(mode, []{ assign(b, not(b)); }, b); });
    if(mode, []{ assign(a, not(a)); }, a);
    this;
  };
};

clone: [n]{
  byte(
    n(0, 0, 0, 0),
    n(0, 0, 0, 1),
    n(0, 0, 1, 0),
    n(0, 0, 1, 1),
    n(0, 1, 0, 0),
    n(0, 1, 0, 1),
    n(0, 1, 1, 0),
    n(0, 1, 1, 1)
  );
};

set: [n, i2, i1, i0, bit]{
  if(neq(n(0, i2, i1, i0), bit), []{
    n(1, i2, i1, i0);
  });
};

iter: [n, f]{
  f(n(0, 0, 0, 0), 0, 0, 0);
  f(n(0, 0, 0, 1), 0, 0, 1);
  f(n(0, 0, 1, 0), 0, 1, 0);
  f(n(0, 0, 1, 1), 0, 1, 1);
  f(n(0, 1, 0, 0), 1, 0, 0);
  f(n(0, 1, 0, 1), 1, 0, 1);
  f(n(0, 1, 1, 0), 1, 1, 0);
  f(n(0, 1, 1, 1), 1, 1, 1);
  n;
};

and: [a, b]{
  assign(a, clone(a));
  iter(a, [bit, i2, i1, i0]{
    set(n, i2, i1, i0, land(bit, b(i2, i1, i0)));
  });
};

or: [a, b]{
  assign(a, clone(a));
  iter(a, [bit, i2, i1, i0]{
    set(n, i2, i1, i0, lor(bit, b(i2, i1, i0)));
  });
};